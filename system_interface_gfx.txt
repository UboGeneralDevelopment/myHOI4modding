加筆中

新しいinterfaceを追加するならば必須の要素。
interfaceのgfxとguiを書き換える必要がある


###################GUI#############################

GFXをつかってinterfaceを設計するファイル
containerとelementに分かれる。

あたらしいcontainerはTechtreeもしくはScripted_GUIでのみ追加することができる。
つまりあたらしいGUIを導入するには必ずScriptedGUIを書く必要がある。

基本的にinterfaceはcontainerでグループ化されている。

containerWindowType
name　container名前
background
size
moveable
fullscreen
orientation
clipping


containerWindowTypeは階層構造を持つことができる。一例をcountry_state_viewを基にして説明すると
containerWindowTypeは以下の通りに並ぶ

claim_entry{}
country_states_view{
	state_info_window{}
	state_resources{}
}
provinse_info_window{}
state_building_entry{}
state_shared_building_entry{}
province_building_entry{}
state_resource_entry{}


###################GFX########################

gfxは2dの画像を表示するためのファイルで、実際のファイル名(ddsなど)とプログラム内での呼び方を結びつける。
以下のような種類がある。
#spriteTypes
spriteType
textSpriteType
frameAnimatedSpriteType
progressbaartype
cornerdTileSpriteType
(maskedShieldType)

#objectTypes
animatedmaptext

#bitmapfonts
textcolors
bitmapfont
bitmapfont_override


#spriteTypes : spriteType
もっともよく出てくるgfx。
spriteTypes = {
    spriteType = {
        name = "GFX_<name>"
        texturefile = <path>
        noOfFrames = <int>
        effectFile = <path>
        
        allwaystransparent = <bool>
        legacy_lazy_load = <bool>
        
        animation = {
            animationmaskfile = <path>
            animationtexturefile = <path>
            animationrotation = <float>
            animationlooping = <bool>
            animationtime = <float>
            animationdelay = <float>
            animationblendmode = <mode>
            animationtype = <type>
            animationrotationoffset = { 
                x = <float>
                y = <float>
            }
            animationtexturescale = {
                x = <float>
                y = <float>
            }
            animationframes = {
                <int> <int> # etc
            }
        }
    }
}
