
modガイド

modガイドライン10か条
１。ゲームファイルはいじくるな　２．よいエディタを使おう　３．バニラファイルの上書きは最小限に
４．よいマージツールを使い、フォルダとファイルをバニラのものやほかのMODと比較しよう　５．バックアップしよう
６．txtファイルはUTF-8で書こう　７．ローカライズファイルymlにはUTF-8-BOMを使おう
８．インデントを使おう　９。#で始まるコメント行を用いよう　１０．デバッグモードをつかおう

マイナーMODとメジャーMOD
メジャーMODにおいては、ロードするデータのフォルダパスを変更してしまい、バニラのフォルダを無視してMODフォルダのデータのみロードしてしまうこともある。

MODの構造
HOI4のMODでは、基本的にバニラのEXEの置いてあるフォルダの中にあるEXE以外のデータをMODでおきかえることができる。
HOI４のMODで可能なことは大別すると、個人的には主に３種類あると考えている。
１　動的メカニクス
２　静的データ改造
３　AI改造
この分類は個人的なもので、そこまで厳密なものではない。
１ 動的メカニクスとは、プレイヤーの操作や、条件付けによって発動することができる追加システムのことである。
NF、アイデア、ディシジョン、技術の追加などゲーム内の既存の機能を拡張するものと、ほぼ完全な新機能を追加するものがある。
2 静的データ改造は、基本的にはゲーム内の既存システムの拡張であり、ゲーム内画像や名前の置き換えから、
従属国、将軍、装備、ユニット、建物、資源、国家、ステートの追加などである。
3 AI改造は、まだあまり詳しくないのでわからん。

さて、ではMODにはいったい何が用意されているかをリスト化すると、主には以下のようになる。分類は主観的なものなので注意。
modでは基本的にはここに用意されているシステムしか作れない。システム名は対応するフォルダ名をあて、複数フォルダにまたがる場合もまとめた。

動的メカニクス
events コマンドによる実行あるいは自分自身の条件付けで自動的に発生 コマンドを実行できる
abilities 将軍の能力 コマンドを実行できる 時間制限付きモディファーをつけられる。
decisions 条件によって出現し、手動かコマンドで実行 コマンドを実行できる 時間制限付きモディファーをつけられる
missions　decisionシステムを使う。基本的には条件が満たされればコマンドが実行される。
continuous_focus 手動実行 使用用途はアイデアを持たせる以外には不明
national_focus 手動かコマンド実行 コマンドを実行する
on_actions 条件にある行動が実行されるとによってコマンドを自動実行 条件はいろいろあるが、リスト化されていない。
scripted_gui 自分でいろいろ作れる。基本的にはコマンドを実行する
ideasおよびidea_tags コマンドによって呼び出されるか、政治力を払う。 コマンドのほか、モディファーを実装できる
technologiesとtechnology_tags 手動研究か、コマンド実行。研究、コマンドとモディファーを実装できる。

静的データ
aces エース
autonomous_states　従属国の種類
buildings 建物の種類と効果
ideologies イデオロギーの種類と効果
modifiers 記述定義したモディファー
names ネームリストなど
resources 資源
scripted_effects 記述定義したコマンド
scripted_triggers 記述定義したトリガー
state_category ステート分類
unit_leaderとtraits リーダーのステータス効果と特性効果
unitsとequipment ユニットの性能と装備性能
countryとcountry_tag 国とそのIDを決めており、また、国の外観（色とグラフィック種類）を決める
history/country 国の具体的な情勢はこちらで決める。政治、アイデアなど
history/states ステートに国のタグを割り当てて初めて国家が存在できるようになる。国家はステートに割り当てられた存在。

GUI、GFX、Localizationも静的データに分類するが、加筆中
GUIはとくにinterfaceにかかわる。
GFXはグラフィックを使うシステムには基本すべて関係する
Localizationは、ID識別されたものにそれの表示する名を割り当てる効果がある。

これらのシステムの実装の詳細についてはそれぞれの説明を参照。また、もちろんこれですべてではない。順次説明を追加。


さて、ここまで紹介したMODはそれぞれに異なった特有の記述方法が決まっているが、共通している要素もある。
共通している要素のうち重要なものが、
スコープ　コマンド（エフェクト）　トリガー（条件）　モディファー　オペレーター
であり、その効果を補強する要素として、
定義　変数 IDによるローカライズ
がある。


まず重要なMOD共通要素、スコープ、コマンド、トリガー、モディファー、について

スコープ
なんらかの操作を行う対象、あるいは範囲を指定する。
スコープは基本的にはゲーム中で選択されている対象であり、スコープ種類は大別すると4種、どこでも(グローバル)、国家、ステート、指揮官である。
MODで行われる操作は基本的には選択されたスコープ中で実行され、効果を及ぼす対象もスコープで指定される。
スコープの種類によって、トリガー、コマンドで使用可能かどうか。指定元、指定先は何か、などがきまっている。
MOD中のどこにスコープを記載するかは、MODシステムに依存し、一定ではない。
使用可能なスコープは詳しくはwikiに記載されているが、他にも動的な国家スコープとしてROOT、FROM、PREVがある。。
また、各スコープ内には数多くの変数が設定されており、これは変数やコマンド、モディファーによって指定し、変化させる。
とはいえ、実際に効果範囲がどうなっているのかは逐次検証が必要である。
基本的な記法は、システム上でスコープ参照が定義されているならば SCOPE = {}　で、かっこの中でいろいろ操作が行われる。


コマンド（エフェクト）
何らかの効果を実行させる。あるスコープにおいて条件が満たされたりアクションがおきると実行され、指定されたスコープに対して影響を与える。
指定したスコープの何かの変数を変更させることが主な働き。コマンドをMOD中のどこに記載するかはMODシステムに依存する。
MODシステムによって、コマンドが実行可能なスコープや通常設定されている。また、効果範囲となるスコープを指定するときもある。
scripted_effectsによって既存のコマンドを組み合わせて自作することもできる。派生としてIF分岐、ランダムリスト、隠し効果、ツールチップがある。
コマンドを実行できるMODシステムをリスト化すると、
decisions,ideas,national_focuses,technologies,events,abilities,
scripted GUI,on action　などである。


トリガー（条件）
MODシステムの実行の可否を決める条件、あるいはMODシステムの実行可能条件を指定するほか、条件分岐などに使用する。
トリガーの記載場所はMODシステムによって異なり、スコープによって利用可能なトリガーも異なる。一つの条件指定にトリガーを複数用いることも可能。
MODシステム内での条件指定で使われる場合と、コマンドの条件分岐で用いられる場合では少々表記法が異なる。
scripted_triggersは自分自身で指定することができるトリガーで、ゲーム内のトリガーを組み合わせてyesかnoを返すトリガーを作れる。
派生としてオペレータによる組み合わせ、カウントトリガー、隠しトリガー、ツールチップがある。
トリガーが使われるのは、
decisions,ideas,national_focuses,technologies,events,abilities,
scripted GUI,on action　などである。


モディファー
あるスコープの中のある変数に対して効果を及ぼす点ではエフェクトに似るが、アイデアなどの実体に紐づけられる。
モディファーをMOD中のどこに記載するかは、MODシステムに依存する。また、MODシステムによって使用可能なモディファーも異なる。
モディファーはディシジョン、国家精神、国家方針などに結びついており、コマンドで直接いじることは基本的にできない。
モディファーは紐づけられた実体がある限りその効果が続く。紐づけられた実体そのものへの変更がなされない限り、モディファーは変更できない。
モディファーの種類もいっぱいあるが、情報が散逸しており、wikiのmodifierの項目以外にもある。また、特定のMODシステムに結びつけられた特殊なモディファーもある。
modifierが使えるリストは、
ideas,decisions,national_focuses,Technologies, abilities,traits,　などである。
また、Technologyやideaなど、特定のシステムでのみ使用可能な特殊なモディファーがあるようなのだが、情報が散逸している。wikiを参照


以上が基本的な構成要素である。また、スコープとコマンド、トリガーの組み合わせ関係、オペレーターについては以下のようになっている。

コマンドとトリガーそれぞれで使用可能なスコープは決まっており、コマンドでは使えるがトリガーでは使えないスコープなどが存在する。
また、スコープによってその指定元と指定先のスコープ種類が決まっている。
指定先はたいていスコープを見ればすぐわかる(random_country)など。指定元とは、指定先の選択基準となるスコープのことで微妙にわかりにくく、書かれないことも多い。
コマンドの場合、通常はコマンド自体が何かのスコープに属し、それがスコープの指定元となっており、指定先は明示されていなければ指定元と同じである。
コマンドは指定先スコープで実施される。指定先は明示することも可能だが、その場合は指定元のスコープ種類がコマンドの属するスコープと一致している必要がある。
トリガーの場合も通常はトリガーの属するスコープが決まっており、それが指定元スコープとなる。明示されてなければ指定元と指定先スコープは一致する。
しかし仮に指定先スコープが明示されていれば、トリガーは指定先スコープを参照する。

さらに、特殊な国家スコープとしてROOT,FROM,PREV,がある。ROOTは国家タグの代用になり、その直前のスコープの指定先の値となる。
FROMはもしその文脈においてROOT以外の国タグのスコープが使われていれば、それになる。
PREVは、FROMに似ているが、スコープの指定先の切り替わり後に切り替わり前の指定先の国家タグを参照する。

オペレーターは、コマンドおよびトリガーの動的な変化を実現するために組み合わせて用いられる。
まず、複雑なトリガーを構成するためのトリガーオペレーターとしてLIMIT,AND,OR,NOTがある。
トリガーは必ずこのオペレータによって入れ子構造になっているが、LIMITとANDはほぼ同じものであり、普通のMODシステムの条件においては省略されている。
実行するコマンドを分岐させるためにIF,ELSE_IF,ELSEのコマンドオペレータがある。もちろんこの中には条件分岐としてトリガーとコマンドが書かれている。
IFなどのコマンド分岐においては、その内部トリガーにはANDやLIMITは必須である。しかし前述のとおり、MODシステム内のトリガーではANDやLIMITは省略される。



そして、これまで説明した要素をサポートするために、以下の要素が用意されている。

変数
各スコープ内に保存される変数で、２つの重要な変数がある。ゲーム内変数とMOD定義変数だ。
ゲーム内変数は参照することのみができるもので、各スコープごとに多くの種類が設定されている。
ゲーム内変数の種類はwikiのvariablesに書かれている。triggerも変数として使える時もある
MOD定義変数は好きな数字や文字を格納でき、指定したスコープに実装され、記憶される。
MOD定義の変数操作はコマンドの一種であり、スコープや条件、操作を指定する必要がある。
変数操作をMODのどこに記載するかはコマンドにほぼ準じており、MODシステムに依存する。

定義
定義された数字を格納している。国に共通することなど、繰り返し用いられる数字などが定義づけられている。書き換えることもあるが、書き換えは恒久的になるので注意。

ローカライズ
ゲーム内の実体の多くはIDであらわされており、言語を変えて表示したいときに、置き換えるIDをこれで置き換える。

などと色々書いたが、プログラミング感覚とはMODDINGは少しちがうといえる。
実際のスクリプティングは、多少の共通性はあるものの、MODシステムごとに決まっている記法に完全に依存し、わりとばらばらである。
よって、どのMODシステムでどの程度のコーディングが可能なのかもMODシステムごとにばらばらであり、実装したいMODの案があるならば、
まずどんなシステムを用いればいいかを探すことが重要である。
基本的にはバニラファイルの記法が正しいが、、バニラファイルの記法がすべてというわけでもなく、異なる書き方でも機能することもある。
また、ウィキの内容もすべてではなく、一番いいのは役に立ちそうなMODをダウンロードし、バニラファイルと比べて調べることである。

以上がMOD編集の概観である。AIやグラフィックについてはほとんどカバーしてないため、そこは今後加筆していく。
